// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef SNAPCALL_FRAMEWORK_SWIFT_H
#define SNAPCALL_FRAMEWORK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Snapcall_Framework",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC18Snapcall_Framework8APIError")
@interface APIError : NSError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

@class PKPushCredentials;

SWIFT_CLASS("_TtC18Snapcall_Framework5Agent")
@interface Agent : NSObject
- (BOOL)setPushCredentialsWithRegisteredAppName:(NSString * _Nonnull)registeredAppName credentials:(PKPushCredentials * _Nullable)credentials friendlyName:(NSString * _Nullable)friendlyName useTestPushServer:(BOOL)useTestPushServer error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)updateAgentOnResult:(void (^ _Nonnull)(NSError * _Nullable, Agent * _Nullable))onResult;
- (void)updateAgentsListWithSearch:(NSString * _Nullable)search page:(NSNumber * _Nullable)page limit:(NSNumber * _Nullable)limit onResult:(void (^ _Nonnull)(NSError * _Nullable, Agent * _Nullable))onResult SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface Agent (SWIFT_EXTENSION(Snapcall_Framework))
- (NSString * _Nonnull)getMail SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Snapcall_Framework10AgentError")
@interface AgentError : NSError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Snapcall_Framework9CallError")
@interface CallError : NSObject
- (NSInteger)getCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDescription SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIImage;

SWIFT_CLASS("_TtC18Snapcall_Framework18CallViewProperties")
@interface CallViewProperties : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (CallViewProperties * _Nonnull)setShouldBackWithShouldBack:(BOOL)shouldBack SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setHangupIconColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getHangupIconColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setIconColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getIconColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setBackColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getBackColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setBackBGColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getBackBGColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setHideColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getHideColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setHideBGColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getHideBGColor SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setHangupBackgroundColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setBackgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setTextColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setVideoBackgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setTextColorState:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setActionBarBackgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setIconBGColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setUserImageBGColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setBackgroundBlur:(BOOL)blur SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setCallName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setAppLabel:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setUserImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
- (CallViewProperties * _Nonnull)setBrandImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end




@class VideoInfo;
@class NSDate;

/// Allow to give access to the developer to call information needed
/// to develop a nice experience with snapcall.
/// It implement the codable protocole in order to save it to file and
/// recreate it back when needed.
/// It serve to make snapcall api request about the call.
SWIFT_CLASS("_TtC18Snapcall_Framework10SCCallObjC")
@interface SCCallObjC : NSObject
- (VideoInfo * _Nonnull)getLocalVideoInfo SWIFT_WARN_UNUSED_RESULT;
- (VideoInfo * _Nonnull)getRemoteVideoInfo SWIFT_WARN_UNUSED_RESULT;
/// return the identifier for the call represented by this
/// author:
/// Pierre Noyelle
///
/// returns:
/// <String> identifier for the call
- (NSString * _Nonnull)getCallIdentifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getCallID SWIFT_WARN_UNUSED_RESULT;
/// return the display name set by the developer or returned by the API
/// author:
/// Pierre Noyelle
///
/// returns:
/// <String?> Name set on the back office or nil
- (NSString * _Nullable)getDisplayName SWIFT_WARN_UNUSED_RESULT;
/// return the brand name set by the developer or returned by the API
/// author:
/// Pierre Noyelle
///
/// returns:
/// <String?> Brand set on the back office or nil
- (NSString * _Nullable)getDisplayBrand SWIFT_WARN_UNUSED_RESULT;
/// return the current state for the call.
/// You can test this String against static String in SCClient and react properly.
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     <String> SCClient.CREATED: the call has been started waiting for server
///   </li>
///   <li>
///     <String> SCClient.RINGING: the other leg is Contacted and your user enter the waiting queue for an answer
///   </li>
///   <li>
///     <String> SCClient.CONNECTED: the call process normally
///   </li>
///   <li>
///     <String> SCClient.DISCONNECTED: the call has encounter a probleme will re connect when possible
///   </li>
/// </ul>
///
/// returns:
///
- (NSString * _Nullable)getCurrentCallState SWIFT_WARN_UNUSED_RESULT;
/// current time in Second since call has answer
/// use it to make a timer.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Int> seconde since start
- (NSInteger)getTime SWIFT_WARN_UNUSED_RESULT;
/// Return the data where the call has been created.
/// usefull if you want to make some sort of call history
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Date?> Date object
- (NSDate * _Nullable)getStartedData SWIFT_WARN_UNUSED_RESULT;
/// return the duration of the call in second.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Int> seconde
- (NSInteger)getDuration SWIFT_WARN_UNUSED_RESULT;
/// give the Held Status, True if the remote leg has put the call on hold.
/// if true your user is in a waiting queue until the other leg unhold.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> held status
- (BOOL)isHeld SWIFT_WARN_UNUSED_RESULT;
/// In case of Queue Call (agent connected on a web interface) return the
/// email of the agent that have answer the call.
/// Appear first after the onAnswer.
/// Is updated in case of transfert in an onAnswer message.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <String?> mail of the agent
- (NSString * _Nullable)getAgentMail SWIFT_WARN_UNUSED_RESULT;
/// True if the call as been transferred once.
/// True after a second onAnswer in case of queue call.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> transferred status
- (BOOL)isTransferred SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SCClientListenerObjC;
@class NSMutableDictionary;
enum VideoRendererType : NSInteger;
@class UIView;
@class SCClientEventObjC;

SWIFT_CLASS("_TtC18Snapcall_Framework8SCClient") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SCClient : NSObject
/// basic init for a client.
/// will register for snapcall Event.
///
/// returns:
/// <SCClient>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)objc_setListenerWithListener:(id <SCClientListenerObjC> _Nonnull)listener;
/// send the Hangup event to the call handler that terminate the current call
/// \param listener <SCClientListener> : an instance on SCClientListener the protocol which serve to snapcall
///
///
/// throws:
///
/// <ul>
///   <li>
///     SnapcallNotStarted: throw if you try to call this fonction while no call is processing.
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (BOOL)hangupAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSNumber * _Nullable)sendInfoWithMessage:(NSMutableDictionary * _Nonnull)message error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)getRemoteVideoRendererWithType:(enum VideoRendererType)type SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)getLocalVideoRenderer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startSendingVideo SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopSendingVideo SWIFT_WARN_UNUSED_RESULT;
- (void)switchCamera;
- (void)updateUI;
- (void)viewDidAppear;
- (void)viewDismiss;
/// send the mute event to the call handler that will change the microphone status
/// to on or off. The event onMuteChange will be fired to confirm the change.
///
/// throws:
///
/// <ul>
///   <li>
///     SnapcallNotStarted: throw if you try to call this fonction while no call is processing.
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (BOOL)muteAndReturnError:(NSError * _Nullable * _Nullable)error;
/// send the Speaker event to the call handler that will change the sound output
/// to default (BT - HeadPhone - low Speaker) or loud Speaker .
/// The event onSpeakerChange will be fired to confirm the change.
///
/// throws:
///
/// <ul>
///   <li>
///     SnapcallNotStarted: throw if you try to call this fonction while no call is processing.
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (BOOL)setSpeakerAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)transferWithDestination:(NSString * _Nonnull)destination SWIFT_AVAILABILITY(ios,introduced=10.0);
- (SCClientEventObjC * _Nullable)objc_getCurrentClientEventAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)rateCallWithRate:(NSInteger)rate requestCallBack:(void (^ _Nullable)(NSError * _Nullable, BOOL))requestCallBack;
- (void)rateCallWithCall:(SCCallObjC * _Nullable)call rate:(NSInteger)rate requestCallBack:(void (^ _Nullable)(NSError * _Nullable, BOOL))requestCallBack;
@end


SWIFT_CLASS("_TtC18Snapcall_Framework17SCClientEventObjC")
@interface SCClientEventObjC : NSObject
/// return if the speaker is activated
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> if the speaker is activated
- (BOOL)isSpeaker SWIFT_WARN_UNUSED_RESULT;
/// return if the microphone is activated
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> micro status
- (BOOL)isMute SWIFT_WARN_UNUSED_RESULT;
/// Return the error added to this instance or nil
/// author:
/// Pierre Noyelle
///
/// returns:
/// <String?> string describing the error
- (NSError * _Nullable)getError SWIFT_WARN_UNUSED_RESULT;
/// return true if Internet is up
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> internet status
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// return the call object describing the current call.
/// author:
/// Pierre Noyelle
///
/// returns:
/// <SCCall?> current call or nil
- (SCCallObjC * _Nullable)getCall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Function the developer have to implement in order to make a custom UI
/// author:
/// Pierre Noyelle
SWIFT_PROTOCOL("_TtP18Snapcall_Framework20SCClientListenerObjC_")
@protocol SCClientListenerObjC
/// Will be called each time the SDK process will start
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onConnectionReady:(SCClientEventObjC * _Nonnull)parameter;
/// Will be called When we succefully gather the information from the database about the call
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onCreated:(SCClientEventObjC * _Nonnull)parameter;
- (void)onUpdateUI:(SCClientEventObjC * _Nonnull)parameter;
/// called when ring start - the remote leg receive the call the media start
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onRinging:(SCClientEventObjC * _Nonnull)parameter;
/// when the call is answered on the other side.
/// if in queue mode the email of the agent will be accessible
/// the timer will start , you will receive tick
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onAnswer:(SCClientEventObjC * _Nonnull)parameter;
/// Called when the internet connection shut down during the next 15s if internet
/// come back the call will be reconnected
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param <objc_SCClientEvent> an Event that contain everything about call and hardware state
///
///
/// returns:
/// <void>
- (void)onInternetDown:(SCClientEventObjC * _Nonnull)parameter;
- (void)onRemoteVideoInfo:(SCClientEventObjC * _Nonnull)parameter;
- (void)onLocalVideoInfo:(SCClientEventObjC * _Nonnull)parameter;
/// Called when the internet connection come back.
/// The reconnection will occur
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onInternetUP:(SCClientEventObjC * _Nonnull)parameter;
/// called when the call end.
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent> : an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onHangup:(SCClientEventObjC * _Nonnull)parameter;
/// called when other leg put the call on hold.
/// the waiting sound will be sent.
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onHeld:(SCClientEventObjC * _Nonnull)parameter;
- (void)onViewDidAppear:(SCClientEventObjC * _Nonnull)parameter;
- (void)onViewDismiss:(SCClientEventObjC * _Nonnull)parameter;
/// called when other leg stop hold mode
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onUnheld:(SCClientEventObjC * _Nonnull)parameter;
/// When Snapcall Process end .
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onConnectionShutDown;
/// called each time the call is muted
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onMuteChange:(SCClientEventObjC * _Nonnull)parameter;
/// called each time the Audio output route change
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onSpeakerChange:(SCClientEventObjC * _Nonnull)parameter;
/// Called when the sdk detect that an UI should be displayed to the user
/// to contole the call
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onUIRequest:(SCClientEventObjC * _Nonnull)parameter;
/// called each second for timing monitor
/// author:
/// Pierre Noyelle
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameter<objc_SCClientEvent>: an Event that contain everything about call and hardware state
///   </li>
/// </ul>
///
/// returns:
/// <void>
- (void)onTime:(SCClientEventObjC * _Nonnull)parameter;
/// called when a message is received from the agent
/// \param callID the identifier for the call
///
/// \param message the message received as a Any object
///
- (void)onMessageWithCallID:(NSString * _Nonnull)callID message:(id _Nonnull)message;
- (void)onErrorWithError:(CallError * _Nonnull)error;
@end


/// Print Log. Object Instanciate in each start of file
/// Log should be unactivate for production mod
/// author:
/// Pierre Noyelle
SWIFT_CLASS("_TtC18Snapcall_Framework5SCLog")
@interface SCLog : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL verbose;)
+ (BOOL)verbose SWIFT_WARN_UNUSED_RESULT;
+ (void)setVerbose:(BOOL)value;
/// activate debug log
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debug;)
+ (BOOL)debug SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebug:(BOOL)value;
/// activate error log
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL error;)
+ (BOOL)error SWIFT_WARN_UNUSED_RESULT;
+ (void)setError:(BOOL)value;
/// activate info log
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL info;)
+ (BOOL)info SWIFT_WARN_UNUSED_RESULT;
+ (void)setInfo:(BOOL)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@class SnapcallExternalParameter;
@class PKPushPayload;

/// The Snapcall class expose the necessary function to check the ButtonIdentifier(BID)
/// and make and receive call. It is accessible by static instance reference from getSnapcall
/// function.
/// \code
/// For a basic call :
/// Snapcall.getSnapcall().launchCall("bid", nil)
///
/// \endcodeTo use Snapcall you need a device with iOS 10 or superior
/// Don’t forget to add plist Entries for microphone and camera as well as for the voip background mode
/// You also need to ask the microphonne permission to your user at the proper moment.
/// you can make it with the snapcall function  :
/// \code
/// requestPermission(callback: { result in ... })
///
/// \endcodeor let the sdk do it at during the first call.
/// author:
/// Pierre Noyelle
SWIFT_CLASS("_TtC18Snapcall_Framework8Snapcall")
@interface Snapcall : NSObject
/// allow to choose to use the snapcall default UI or use your own
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL defaultUserInterfaceOff;)
+ (BOOL)defaultUserInterfaceOff SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultUserInterfaceOff:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useUserInterfaceV2;)
+ (BOOL)useUserInterfaceV2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseUserInterfaceV2:(BOOL)value;
/// change the name for callkit. This name will appear into callKit UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable AppName;)
+ (NSString * _Nullable)AppName SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppName:(NSString * _Nullable)value;
/// only for call reception modify the ringtone heard when a call is received
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable ringtoneSound;)
+ (NSString * _Nullable)ringtoneSound SWIFT_WARN_UNUSED_RESULT;
+ (void)setRingtoneSound:(NSString * _Nullable)value;
/// Data of an image that will be used into callKit UI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSData * _Nullable callIconTemplate;)
+ (NSData * _Nullable)callIconTemplate SWIFT_WARN_UNUSED_RESULT;
+ (void)setCallIconTemplate:(NSData * _Nullable)value;
- (Snapcall * _Nonnull)setAPIkeyWithApiKey:(NSString * _Nonnull)apiKey SWIFT_WARN_UNUSED_RESULT;
/// request to get the status of a bid
/// will return false if this BID is curently closed (out of shedule) or
/// if you put it inactive on the snapcall Dashboard
/// \param bid_id the button identifier you use to make call
///
/// \param snapcallCallBack a closure to get the result of the request
///
///
/// returns:
/// a boolean set to false if the request can’t be made.
- (BOOL)buttonIsClosedWithBid_id:(NSString * _Nonnull)bid_id snapcallCallBack:(void (^ _Nonnull)(BOOL))snapcallCallBack SWIFT_WARN_UNUSED_RESULT;
/// launch a Call with the button identifier created into the dashboard.
/// \param bidId identifier from your button in the dashboard
///
/// \param parameter parameter to customise your call or nil
///
- (void)launchCallWithBidId:(NSString * _Nonnull)bidId parameter:(SnapcallExternalParameter * _Nullable)parameter SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)launchCallWithBidId:(NSString * _Nonnull)bidId sendClientMessage:(void (^ _Nonnull)(NSString * _Nonnull))sendClientMessage parameter:(SnapcallExternalParameter * _Nullable)parameter SWIFT_AVAILABILITY(ios,introduced=10.0);
/// launch a Call to one of your user linked to the identifier
/// \param bidId button identifier given by the dashboard
///
/// \param applicationName the application you register into snapcall
///
/// \param customClientIdentifier the identifier you set when registering your user.
///
/// \param parameter parameter to customise your call or nil
///
- (void)launchCallWithBidId:(NSString * _Nonnull)bidId applicationName:(NSString * _Nonnull)applicationName customClientIdentifier:(NSString * _Nonnull)customClientIdentifier parameter:(SnapcallExternalParameter * _Nullable)parameter SWIFT_AVAILABILITY(ios,introduced=10.0);
/// launch a Call to one of your user linked to the identifier given by snapcall when
/// you call the register function.
/// \param bidId button identifier given by the dashboard
///
/// \param snapcallIdentifier identifier received into registerUser
///
/// \param parameter parameter to customise your call or nil
///
- (void)launchCallWithBidId:(NSString * _Nonnull)bidId snapcallIdentifier:(NSString * _Nonnull)snapcallIdentifier parameter:(SnapcallExternalParameter * _Nullable)parameter SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)restorCallUI SWIFT_AVAILABILITY(ios,introduced=10.0);
/// start a call when receiving a Push payload
/// <ul>
///   <li>
///     Parameter:
///     -pushKitPayload: the payload received.
///     -param: parameter to customise the call.
///   </li>
/// </ul>
///
/// returns:
/// Bool true if the payload contain the necessary information to make the call.
- (BOOL)receivePushCallWithData:(PKPushPayload * _Nonnull)data param:(SnapcallExternalParameter * _Nullable)param error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)requestPermissionWithCallback:(void (^ _Nonnull)(BOOL))callback;
/// Allow to make a request for microphone permission
/// this function will block until the result
/// author:
/// Pierre Noyelle
///
/// returns:
/// <Bool> if the permission has been granted
- (BOOL)requestPermission SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
- (void)requestPermissionVideoWithCallback:(void (^ _Nonnull)(BOOL))callback;
/// check the status for the necessary permission required to launch a call
///
/// returns:
/// true if the permissions are granted by the user
- (BOOL)isPermissionRequestGranted SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (Snapcall * _Nonnull)getSnapcall SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// release the static instance
+ (void)releaseSnapcall;
- (CallViewProperties * _Nonnull)getCallViewProperties SWIFT_WARN_UNUSED_RESULT;
/// make the rate request after having checked the different argument for objective c
/// implementation
/// \param call object representing the call to rate
///
/// \param rate the rate to set between 0 and  5
///
/// \param requestCallBack closure to get the result of the request or to get an error of type snapcallError
///
- (void)rateCallWithCall:(SCCallObjC * _Nullable)call rate:(NSInteger)rate requestCallBack:(void (^ _Nullable)(NSError * _Nullable, BOOL))requestCallBack;
@end

@class NSArray;

@interface Snapcall (SWIFT_EXTENSION(Snapcall_Framework))
- (void)getAgentsListWithSearch:(NSString * _Nullable)search page:(NSNumber * _Nullable)page limit:(NSNumber * _Nullable)limit onResult:(void (^ _Nonnull)(NSError * _Nullable, NSArray * _Nullable))onResult;
- (void)launchAgentCallWithAgent:(Agent * _Nonnull)agent number:(NSString * _Nonnull)number param:(SnapcallExternalParameter * _Nullable)param SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)connectAgentWithAgent:(Agent * _Nonnull)agent param:(SnapcallExternalParameter * _Nullable)param SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


@interface Snapcall (SWIFT_EXTENSION(Snapcall_Framework))
- (void)connectPartnerAgentWithPartnerID:(NSInteger)partnerID agent:(NSString * _Nonnull)agent token:(NSString * _Nonnull)token parameter:(SnapcallExternalParameter * _Nullable)parameter :(void (^ _Nonnull)(NSError * _Nullable, Agent * _Nullable))callback;
- (void)sendPartnerCallInvitationWithPartnerID:(NSInteger)partnerID token:(NSString * _Nonnull)token chatID:(NSString * _Nonnull)chatID :(void (^ _Nonnull)(NSError * _Nullable))callback;
- (void)sendPartnerCallInvitationWithPartnerID:(NSInteger)partnerID agent:(NSString * _Nonnull)agent token:(NSString * _Nonnull)token chatID:(NSString * _Nonnull)chatID parameter:(SnapcallExternalParameter * _Nullable)parameter :(void (^ _Nonnull)(NSError * _Nullable, Agent * _Nullable))callback;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface Snapcall (SWIFT_EXTENSION(Snapcall_Framework))
/// call this function in order to connecte to a received call from a VOIP push notification
/// \param pushKitPayload the received payload
///
/// \param parameter parameter to customise your call or nil
///
///
/// returns:
/// return false if an error occur before the call start
- (BOOL)receiveCallWithPushKitPayload:(PKPushPayload * _Nullable)pushKitPayload parameter:(SnapcallExternalParameter * _Nullable)parameter SWIFT_WARN_UNUSED_RESULT;
/// make a http request in order to save your user token into our DataBase
/// this will allow you to make call to this device.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     credential: PKPushCredentials are the credential given when you register for VOIP push notification
///   </li>
///   <li>
///     identifier:if you already get a token and you want to update it by replacing the already linked device.
///   </li>
///   <li>
///     customClientIdentifier:  the id for your user. it will be linked to your app and you will be able to make call to this device
///   </li>
///   <li>
///     applicationName:<String> the name you registered for snapcall usage (linked to your VOIP certicate)
///   </li>
///   <li>
///     snapcallIdentifierCallBack: closure to get the result of the request. The argument will be a token that you can use in order to call this device
///   </li>
/// </ul>
///
/// returns:
/// <Bool> if the request can be done.
- (BOOL)registerUserWithCredential:(PKPushCredentials * _Nonnull)credential identifier:(NSString * _Nullable)identifier customClientIdentifier:(NSString * _Nullable)customClientIdentifier applicationName:(NSString * _Nonnull)applicationName snapcallIdentifierCallBack:(void (^ _Nonnull)(NSString * _Nullable))snapcallIdentifierCallBack SWIFT_WARN_UNUSED_RESULT;
/// make a http request in order to save your user token into our DataBase
/// this will allow you to make call to this device.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     credential: PKPushCredentials in String formats
///   </li>
///   <li>
///     identifier:if you already get a token and you want to update it by replacing the already linked device.
///   </li>
///   <li>
///     customClientIdentifier:  the id for your user. it will be linked to your app and you will be able to make call to this device
///   </li>
///   <li>
///     applicationName:<String> the name you registered for snapcall usage (linked to your VOIP certicate)
///   </li>
///   <li>
///     snapcallIdentifierCallBack: closure to get the result of the request. The argument will be a token that you can use in order to call this device
///   </li>
/// </ul>
///
/// returns:
/// <Bool> if the request can be done.
- (BOOL)registerUserWithToken:(NSString * _Nonnull)token identifier:(NSString * _Nullable)identifier customClientIdentifier:(NSString * _Nullable)customClientIdentifier applicationName:(NSString * _Nonnull)applicationName snapcallIdentifierCallBack:(void (^ _Nonnull)(NSString * _Nullable))snapcallIdentifierCallBack SWIFT_WARN_UNUSED_RESULT;
- (void)getAgentWithMail:(NSString * _Nonnull)mail onResult:(void (^ _Nonnull)(NSError * _Nullable, Agent * _Nullable))onResult;
/// active a user. Basically it will block or unblock the ability to receive call for this user
/// \param active the status wanted
///
/// \param credential the token given by the VOIP push registration
///
/// \param identifier the identifier given by snapcall or nil
///
/// \param customClientIdentifier the identifier you set or nil
///
/// \param applicationName the name of your project into snapcall
///
/// \param snapcallCallBack a closure to get the result of the request
///
///
/// returns:
/// return false if the rquest can’t be made
- (BOOL)setUserActiveWithActive:(BOOL)active credential:(PKPushCredentials * _Nonnull)credential identifier:(NSString * _Nullable)identifier customClientIdentifier:(NSString * _Nullable)customClientIdentifier applicationName:(NSString * _Nonnull)applicationName snapcallCallBack:(void (^ _Nonnull)(BOOL))snapcallCallBack SWIFT_WARN_UNUSED_RESULT;
/// active a user. Basically it will block or unblock the ability to receive call for this user
/// \param active the status wanted
///
/// \param token the token given by the VOIP push registration in a String format
///
/// \param identifier the identifier given by snapcall or nil
///
/// \param customClientIdentifier the identifier you set or nil
///
/// \param applicationName the name of your project into snapcall
///
/// \param snapcallCallBack a closure to get the result of the request
///
///
/// returns:
/// return false if the rquest can’t be made
- (BOOL)setUserActiveWithActive:(BOOL)active token:(NSString * _Nonnull)token identifier:(NSString * _Nullable)identifier customClientIdentifier:(NSString * _Nullable)customClientIdentifier applicationName:(NSString * _Nonnull)applicationName snapcallCallBack:(void (^ _Nonnull)(BOOL))snapcallCallBack SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18Snapcall_Framework22Snapcall_eventListener_")
@protocol Snapcall_eventListener
- (void)onStart;
- (void)onErrorWithError:(NSString * _Nonnull)error;
- (void)onCallStart;
- (void)onUIStart;
- (void)onTimeWithTime:(NSInteger)time;
- (void)onUIEnd;
- (void)onCallEnd;
- (void)onEnd;
@end


@interface Snapcall (SWIFT_EXTENSION(Snapcall_Framework)) <Snapcall_eventListener>
- (void)onStart;
- (void)onErrorWithError:(NSString * _Nonnull)error;
- (void)onCallStart;
- (void)onUIStart;
- (void)onTimeWithTime:(NSInteger)time;
- (void)onUIEnd;
- (void)onCallEnd;
- (void)onEnd;
- (NSInteger)addEventListenerWithListener:(id <Snapcall_eventListener> _Nonnull)listener SWIFT_WARN_UNUSED_RESULT;
- (void)removeEventListenerWithIndex:(NSInteger)index;
- (void)removeAllEventListener;
@end

@class UIFontDescriptor;

SWIFT_CLASS("_TtC18Snapcall_Framework25SnapcallExternalParameter")
@interface SnapcallExternalParameter : NSObject
/// Image Url in order to replace the logo into the default user interface
@property (nonatomic, copy) NSString * _Nullable urlImage;
/// The name of your image into your asset in order to replace the logo into the default user interface
@property (nonatomic, copy) NSString * _Nullable nameImage;
/// allow to add a return button to call UI. It will be used to return into your UI during the call
/// you must have added a way for him to get back to the call ui to hangup
@property (nonatomic) BOOL shouldReturn;
/// the string you want to be placed on top of the default call UI
@property (nonatomic, copy) NSString * _Nullable callTitle;
/// the name added into the callUI
@property (nonatomic, copy) NSString * _Nullable displayName;
/// the brand added into the callUI
@property (nonatomic, copy) NSString * _Nullable displayBrand;
/// set the name to send to the remote leg ( only for client to client call )
@property (nonatomic, copy) NSString * _Nullable senderName;
/// set the second name to send to the remote leg ( only for client to client call )
@property (nonatomic, copy) NSString * _Nullable senderBrand;
/// hide the cart icon from the call UI
@property (nonatomic) BOOL hideCart;
/// change the text color for the default call UI
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// change the icon color for the default call UI
@property (nonatomic, strong) UIColor * _Nullable iconColor;
/// change the background color for the default call UI
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// the context you want to link into the database to the call
@property (nonatomic, strong) NSMutableDictionary * _Nullable externalContext;
/// data to directly send to the remote party only for client to client
@property (nonatomic, copy) NSString * _Nullable pushTransfertData;
/// the font for the default call UI
@property (nonatomic, strong) UIFontDescriptor * _Nullable fontDescriptor;
/// the title for the notification sent to an android phone only for client to client
@property (nonatomic, copy) NSString * _Nullable androidNotificationTitle;
/// the body for the notification sent to an android phone only for client to client
@property (nonatomic, copy) NSString * _Nullable androidNotificatiobBody;
@property (nonatomic) BOOL useVideo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC18Snapcall_Framework18Snapcall_WebSocket")
@interface Snapcall_WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
@end


@interface Snapcall_WebSocket (SWIFT_EXTENSION(Snapcall_Framework))
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end








SWIFT_CLASS("_TtC18Snapcall_Framework9VideoInfo")
@interface VideoInfo : NSObject
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSetup SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVideoTypeValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VideoRendererType, open) {
  VideoRendererTypeFull = 0,
  VideoRendererTypeFill = 1,
};


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP18Snapcall_Framework17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end

/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
